package com.family_tree.familytree;

import java.util.Date;
import com.family_tree.enums.Gender;
import com.family_tree.enums.PrivacySetting;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private FamilyTreeRepository familyTreeRepository;

    @Autowired
    private FamilyMemberRepository familyMemberRepository;

    // User-related methods
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String username,
                                            @RequestParam String emailAddress) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User user = new User();
        user.setUsername(username);
        user.setEmail(emailAddress);
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    // FamilyTree-related methods
    @PostMapping("/addFamilyTree")
    public @ResponseBody String addFamilyTree(@RequestParam String treeName,
                                              @RequestParam PrivacySetting privacySetting,
                                              @RequestParam Integer userId) {
        User owner = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        FamilyTree familyTree = new FamilyTree();
        familyTree.setTreeName(treeName);
        familyTree.setPrivacySetting(privacySetting);
        familyTree.setOwner(owner);

        familyTreeRepository.save(familyTree);
        return "Family Tree Saved";
    }

    @GetMapping("/allFamilyTrees")
    public @ResponseBody Iterable<FamilyTree> getAllFamilyTrees() {
        return familyTreeRepository.findAll();
    }

    //FamilyMember-related methods
    @PostMapping("/addFamilyMember")
    public @ResponseBody String addFamilyMember(@RequestParam String name,
                                                @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date birthdate,
                                                @RequestParam Gender gender,  // Gender is already of type Gender
                                                @RequestParam Integer treeId,
                                                @RequestParam Integer addedById,
                                                @RequestParam(required = false) String additionalInfo) {
        FamilyTree familyTree = familyTreeRepository.findById(treeId)
                .orElseThrow(() -> new RuntimeException("Family tree not found"));

        User addedBy = userRepository.findById(addedById)
                .orElseThrow(() -> new RuntimeException("User not found"));

        FamilyMember familyMember = new FamilyMember();
        familyMember.setName(name);
        familyMember.setBirthdate(birthdate);
        familyMember.setGender(gender); // No need for valueOf() here
        familyMember.setFamilyTree(familyTree);
        familyMember.setAddedBy(addedBy);
        familyMember.setAdditionalInfo(additionalInfo);

        familyMemberRepository.save(familyMember);
        return "Family Member Saved";
    }
}
